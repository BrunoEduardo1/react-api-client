{"version":3,"sources":["components/SeriesList/index.js","containers/Series/index.js","components/EpisodesList/episodes.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SeriesListItem","_ref","series","react_default","a","createElement","className","Link","to","concat","show","id","title","name","image","alt","src","medium","style","height","SeriesList","props","list","map","SeriesList_SeriesListItem","key","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","_this$state","this","type","onChange","length","trim","src_components_SeriesList","Component","Episode","episodes","number","season","summary","dangerouslySetInnerHTML","__html","EpisodesList","episodes_Episode","SingleSeries","episodesListC","handleClick","_this2","match","params","scope","rating","average","premiered","_embedded","onClick","EpisodesList_episodes","Main","Switch","Route","exact","path","component","App","components_Main","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAQMA,SAAiB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAF,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,UAAAC,OAAYP,EAAOQ,KAAKC,IAAMC,MAAOV,EAAOQ,KAAKG,MACrDV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEW,OAAtBJ,EAAOQ,KAAKI,OAAkBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAOQ,KAAKG,KAAMG,IAAKd,EAAOQ,KAAKI,MAAMG,UACzD,MAArBf,EAAOQ,KAAKI,OAAiBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAOQ,KAAKG,KAAMK,MAAO,CAACC,OAAQ,YAoB3EC,EAbI,SAAAC,GACjB,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZe,EAAMC,KAAKC,IAAI,SAAArB,GAAM,OACpBC,EAAAC,EAAAC,cAACmB,EAAD,CAAgBtB,OAAQA,EAAQuB,IAAKvB,EAAOQ,KAAKC,UCoC5Ce,oNApDbC,MAAQ,CACNzB,OAAQ,GACR0B,WAAY,GACZC,YAAY,KAUdC,oBAAsB,SAAAC,GACpBC,EAAKC,SAAS,CAAEL,WAAYG,EAAEG,OAAOC,MAAON,YAAY,IACtDO,MAAK,wCAAA3B,OAAyCsB,EAAEG,OAAOC,QACtDE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIP,EAAKC,SAAS,CAAC/B,OAAQqC,EAAMV,YAAY,+EAMjD,IAAAW,EACkCC,KAAKd,MAAvCzB,EADAsC,EACAtC,OAAQ0B,EADRY,EACQZ,WAAYC,EADpBW,EACoBX,WAC5B,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBAAsB6B,MAAOP,EAAYc,KAAK,OAAOC,SAAUF,KAAKX,yBAKxFD,GAAgC,IAAlB3B,EAAO0C,QAAsC,KAAtBhB,EAAWiB,QAC9C1C,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sDAGLwB,GAAgC,IAAlB3B,EAAO0C,QAAsC,KAAtBhB,EAAWiB,QAC9C1C,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6CAGNwB,GAAc1B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,gCAGhBwB,GAAc1B,EAAAC,EAAAC,cAACyC,EAAD,CAAYxB,KAAMmB,KAAKd,MAAMzB,iBA/C9B6C,cCLhBC,SAAU,SAAA/C,GAAgB,IAAdgD,EAAchD,EAAdgD,SACRtC,EAAkCsC,EAAlCtC,GAAGuC,EAA+BD,EAA/BC,OAAOC,EAAwBF,EAAxBE,OAAOtC,EAAiBoC,EAAjBpC,KAAKuC,EAAYH,EAAZG,QAC9B,OACEjD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIoB,IAAKd,GAAT,IAAewC,EAAf,IAAwBD,GACxB/C,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAe+C,wBAAyB,CAACC,OAAOF,SA6BxDG,EAxBM,SAAAlC,GAEnB,OACIlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uDACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGJF,EAAAC,EAAAC,cAAA,aACGgB,EAAM4B,SAAS1B,IAAI,SAAA0B,GAAQ,OAC1B9C,EAAAC,EAAAC,cAACmD,EAAD,CAASP,SAAUA,EAAUxB,IAAKwB,EAAStC,SAKnDR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,IAAOF,UAAU,qBAAzB,YC4CSmD,6MAtEb9B,MAAQ,CACNjB,KAAM,KACNgD,eAAe,KAUjBC,YAAc,YACX3B,EAAKL,MAAM+B,eAAiB1B,EAAKC,SAAS,CAACyB,eAAe,IAC1D1B,EAAKL,MAAM+B,eAAiB1B,EAAKC,SAAS,CAACyB,eAAe,wFAV1C,IAAAE,EAAAnB,KAEP9B,EAAO8B,KAAKpB,MAAMwC,MAAMC,OAAxBnD,GACRyB,MAAK,+BAAA3B,OAAgCE,EAAhC,oBACJ0B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIqB,EAAK3B,SAAS,CAACvB,KAAM6B,uCAQ/B,IACE7B,EAAS+B,KAAKd,MAAdjB,KAER,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGJ,OAATI,GAEAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEI,OAAfI,EAAKI,OAAkBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKL,EAAKG,KAAMG,IAAKN,EAAKI,MAAMG,UAC3C,MAAdP,EAAKI,OAAiBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKL,EAAKG,KAAMK,MAAO,CAACC,OAAQ,QAGlEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe+C,wBAAyB,CAACC,OAAO5C,EAAK0C,WACpEjD,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI0D,MAAM,OAAV,QACA5D,EAAAC,EAAAC,cAAA,MAAI0D,MAAM,OAAV,iBACA5D,EAAAC,EAAAC,cAAA,MAAI0D,MAAM,OAAV,kBAGJ5D,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKK,EAAKsD,OAAOC,SACjB9D,EAAAC,EAAAC,cAAA,UAAKK,EAAKwD,WACV/D,EAAAC,EAAAC,cAAA,UAAKK,EAAKyD,UAAUlB,SAASL,YAKvCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,UAAQqC,KAAK,SAASpC,UAAU,oBAAoBO,KAAK,SAASuD,QAAS3B,KAAKkB,aAEzElB,KAAKd,MAAM+B,cAAuCjB,KAAKd,MAAM+B,eAAiB,uBAAlD,uBAIjCjB,KAAKd,MAAM+B,eACVvD,EAAAC,EAAAC,cAACgE,EAAD,CAAcpB,SAAUvC,EAAKyD,UAAUlB,qBA7DzBF,aCUZuB,EARF,SAAAjD,GAAK,OAChBlB,EAAAC,EAAAC,cAACkE,EAAA,EAAD,KACIpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjCvB,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWlB,MCcjCmB,mLAhBX,OACEzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,IAAOF,UAAU,YAAzB,wBAKJH,EAAAC,EAAAC,cAACwE,EAAD,cAZU9B,aCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,uECVNqB,IAASC,OACPhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAACgF,EAAD,OAEAC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.086bee6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n// const SeriesListItem = ({series}) => (\r\n//     <li><Link to={`/serie/${series.show.id}`}>{series.show.name}</Link></li>\r\n// )\r\nconst SeriesListItem = ({series}) => (\r\n    <div className=\"col-10 col-sm-6 col-md-4 col-lg-3 mb-3 mx-auto\">\r\n      <Link to={`/serie/${series.show.id}`} title={series.show.name}>\r\n          <div className=\"card\">\r\n            {\r\n              series.show.image !== null && <img alt={series.show.name} src={series.show.image.medium}/>\r\n              || series.show.image == null && <img alt={series.show.name} style={{height: 295}}/>\r\n            }\r\n          </div>\r\n      </Link>\r\n    </div>\r\n)\r\n\r\nconst SeriesList = props => {\r\n  return (\r\n    <div>\r\n      <div className=\"row pt-5\">\r\n        {props.list.map(series => (\r\n          <SeriesListItem series={series} key={series.show.id}/>\r\n        )\r\n      )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeriesList;\r\n","import React, { Component } from 'react';\r\nimport SeriesList from '../../components/SeriesList';\r\nimport './index.css';\r\n\r\n// import Loader from '../../components/Loader';\r\n\r\n\r\n\r\nclass Series  extends Component{\r\n  //State(component Feature)\r\n  state = {\r\n    series: [],\r\n    seriesName: '',\r\n    isFetching: false\r\n  }\r\n  //set up a timer\r\n  // componentDidMount() {\r\n  //   fetch('http://api.tvmaze.com/search/shows?q=flash')\r\n  //   .then(response => response.json())\r\n  //   .then(json => this.setState({series: json}))\r\n  //\r\n  // }\r\n\r\n  onSeriesInputChange = e => {\r\n    this.setState({ seriesName: e.target.value, isFetching: true});\r\n      fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n      .then(response => response.json())\r\n      .then(json => this.setState({series: json, isFetching: false}))\r\n    //console.log(e);\r\n    //console.log(e.target.value);\r\n    //Tamanho do array {this.state.series.length}\r\n  }\r\n\r\n  render () {\r\n    const { series, seriesName, isFetching} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-lg-4 mt-5 mx-auto\">\r\n            <input className=\"form-control search\" value={seriesName} type=\"text\" onChange={this.onSeriesInputChange} />\r\n          </div>\r\n        </div>\r\n      {/*Condições*/}\r\n      {\r\n        !isFetching && series.length === 0 && seriesName.trim() === ''\r\n        && <p><small>Por favor Insira o nome da série</small></p>\r\n      }\r\n      {\r\n        !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n        && <p><small>Série não encontrada!</small></p>\r\n      }\r\n      {\r\n        isFetching && <p><small>Carregando...</small></p> //<Loader/>\r\n      }\r\n      {\r\n        !isFetching && <SeriesList list={this.state.series}/>\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Series;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Episode = ({episodes}) => {\r\n  const { id,number,season,name,summary } = episodes;\r\n  return (\r\n    <tr>\r\n      <td key={id}>S{season}E{number}</td>\r\n      <td>{name}</td>\r\n      <td><p className=\"text-justify\" dangerouslySetInnerHTML={{__html:summary}} /></td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst EpisodesList = props => {\r\n  //console.log(props.episodes);\r\n  return (\r\n      <div>\r\n        <table className=\"table table-sm table-bordered table-responsive mt-4\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Título</th>\r\n              <th>Sumário</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.episodes.map(episodes => (\r\n              <Episode episodes={episodes} key={episodes.id}/>\r\n              )\r\n            )}\r\n         </tbody>\r\n      </table>\r\n      <Link to={`/`} className=\"btn btn-secundary\">Voltar</Link>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default EpisodesList;\r\n","import React, { Component } from 'react';\r\nimport '../../bootstrap.min.css';\r\n//import { Link } from 'react-router-dom';\r\nimport EpisodesList from '../../components/EpisodesList/episodes.js';\r\n\r\n\r\nclass SingleSeries extends Component {\r\n  state = {\r\n    show: null,\r\n    episodesListC: false\r\n  }\r\n  componentDidMount(){\r\n    // this.setState({ seriesName: e.target.value, isFetching: true});\r\n      const { id } = this.props.match.params\r\n      fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n      .then(response => response.json())\r\n      .then(json => this.setState({show: json}))\r\n  }\r\n\r\n  handleClick = () => {\r\n    !this.state.episodesListC && this.setState({episodesListC: true})\r\n     this.state.episodesListC && this.setState({episodesListC: false})\r\n  }\r\n\r\n  render(){\r\n    const { show } = this.state;\r\n    {/*show !== null && console.log(show)*/}\r\n    return (\r\n      <div className=\"container\">\r\n\r\n      {\r\n        show !== null\r\n        &&\r\n        <div className=\"row\">\r\n          <div className=\"col my-auto pt-5\">\r\n            {\r\n              show.image !== null && <img alt={show.name} src={show.image.medium}/>\r\n              || show.image == null && <img alt={show.name} style={{height: 295}}/>\r\n            }\r\n          </div>\r\n          <div className=\"col mt-5\">\r\n              <div className=\"text-justify\" dangerouslySetInnerHTML={{__html:show.summary}} />\r\n              <table className=\"table table-sm table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Nota</th>\r\n                    <th scope=\"col\">Lançamento</th>\r\n                    <th scope=\"col\">Episódios</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>{show.rating.average}</td>\r\n                    <td>{show.premiered}</td>\r\n                    <td>{show._embedded.episodes.length}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n          </div>\r\n          <div className=\"col-12 pt-5\">\r\n          <button type=\"button\" className=\"btn btn-secundary\" name=\"button\" onClick={this.handleClick} >\r\n            {\r\n                !this.state.episodesListC && 'Listar Episódios' || this.state.episodesListC && 'Ocultar Episódios'\r\n            }\r\n          </button>\r\n          {\r\n            this.state.episodesListC &&\r\n             <EpisodesList episodes={show._embedded.episodes}/>\r\n          }\r\n          </div>\r\n        </div>\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SingleSeries;\r\n","//rotas\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\n\r\n\r\n\r\nconst Main = props => (\r\n  <Switch>\r\n      <Route exact path=\"/\" component={Series}/>\r\n      <Route exact path=\"/serie/:id\" component={SingleSeries} />\r\n  </Switch>\r\n\r\n)\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './App.css';\r\n// import Series from '../../containers/Series';\r\nimport Main from '../Main';\r\n// import whatwg-fecth\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n          <p>\r\n            <Link to={`/`} className=\"linkHome\">\r\n              Busca de Séries\r\n            </Link>\r\n          </p>\r\n        </header>\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  , document.getElementById('root'));\r\n\r\n// const boasVindas = React.CreateElement('h1',{},'bruno');\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}